name: clothGAN
version: "3"

services:
  zookeeper:
    container_name: zookeeper
    image: docker.io/bitnami/zookeeper:3.9
    ports:
      - '2181:2181'
      - '8091:8080'
    volumes:
      - ${ZOOKEEPER_DATA_DIR}:/bitnami/zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_ENABLE_ADMIN_SERVER=yes
    networks:
      - clothGAN-network

  spark:
    # build:
    #   context: .
    #   dockerfile: Dockerfile.spark
    # image: docker.io/bitnami/spark:3.5.3
    image: clothgan-spark
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    ports:
      - '8080:8080'
    volumes:
      - ${SPARK_JOBS_DIR}:/opt/spark-jobs
      - ${SPARK_MODELS_DIR}:/opt/spark-models
    networks:
      - clothGAN-network

  spark-worker:
    # image: docker.io/bitnami/spark:3.5.3
    image: clothgan-spark
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    volumes:
      - ${SPARK_JOBS_DIR}:/opt/spark-jobs
      - ${SPARK_MODELS_DIR}:/opt/spark-models
    networks:
      - clothGAN-network
    deploy:
      replicas: ${SPARK_WORKER_COUNT:-1}

  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '9092:9092'
    volumes:
      - ${KAFKA_DATA_DIR}:/bitnami/kafka
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    networks:
      - clothGAN-network

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8090:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    depends_on:
      - kafka
    networks:
      - clothGAN-network

  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: always
    ports:
      - 9870:9870
      - 9000:9000
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop.env
    networks:
      - clothGAN-network

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    restart: always
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
    networks:
      - clothGAN-network

  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864"
    env_file:
      - ./hadoop.env
    networks:
      - clothGAN-network

  nodemanager1:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    env_file:
      - ./hadoop.env
    networks:
      - clothGAN-network

  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: historyserver
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    volumes:
      - hadoop_historyserver:/hadoop/yarn/timeline
    env_file:
      - ./hadoop.env
    networks:
      - clothGAN-network

  # Add Zookeeper UI
  zoonavigator:
    image: elkozmon/zoonavigator:latest
    container_name: zoonavigator
    ports:
      - "9001:9000"
    environment:
      HTTP_PORT: 9000
    networks:
      - clothGAN-network

  # HDFS file browser
  hdfs-filebrowser:
    image: bde2020/hdfs-filebrowser:latest
    container_name: hdfs-filebrowser
    ports:
      - "8088:8088"
    environment:
      - NAMENODE_HOST=namenode
      - NAMENODE_PORT=9000
      - FILEBROWSER_USERNAME=admin # Add this line
      - FILEBROWSER_PASSWORD=admin # Add this line
    networks:
      - clothGAN-network # HBase Master Server
  # HBase (All-in-one)
  hbase:
    image: dajobe/hbase
    container_name: hbase
    hostname: hbase
    ports:
      - "8080:8080" # HBase REST API
      - "9090:9090" # Thrift API
      - "9095:9095" # Thrift2 API
      - "16010:16010" # HBase Master Web UI
    environment:
      - HBASE_MANAGE_ZK=false # Tells HBase not to start its own Zookeeper
      - HBASE_ZOOKEEPER_QUORUM=zookeeper-container # Replace with actual Zookeeper container name
      - HBASE_ZOOKEEPER_PROPERTY_CLIENTPORT=2181
      - HBASE_ROOTDIR=/data/hbase # Ensures HBase data is persistent
      - HBASE_CLUSTER_DISTRIBUTED=true # Runs in distributed mode, required for external ZK

    depends_on:
      - zookeeper
    volumes:
      - hbase_data:/data
    networks:
      - clothGAN-network

  cassandra:
    container_name: cassandra
    hostname: cassandra
    image: 'bitnami/cassandra:latest'
    ports:
      - '9042:9042'
      - '9160:9160'
    networks:
      - clothGAN-network
    volumes:
      - ${CASSANDRA_DATA_DIR}:/bitnami
    environment:
      - CASSANDRA_PASSWORD=cassandra
      - CASSANDRA_USER=cassandra
      - CASSANDRA_LISTEN_ADDRESS=0.0.0.0
      - CASSANDRA_BROADCAST_ADDRESS=cassandra
      - CASSANDRA_RPC_ADDRESS=0.0.0.0
  # hive-server:
  #   image: bde2020/hive:2.3.2-postgresql-metastore
  #   env_file:
  #     - ./hadoop-hive.env
  #   environment:
  #     HIVE_CORE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore/metastore"
  #     SERVICE_PRECONDITION: "hive-metastore:9083"
  #   ports:
  #     - "10000:10000"
  # hive-metastore:
  #   image: bde2020/hive:2.3.2-postgresql-metastore
  #   env_file:
  #     - ./hadoop-hive.env
  #   command: /opt/hive/bin/hive --service metastore
  #   environment:
  #     SERVICE_PRECONDITION: "namenode:50070 datanode:50075 hive-metastore-postgresql:5432"
  #   ports:
  #     - "9083:9083"
  # hive-metastore-postgresql:
  #   image: bde2020/hive-metastore-postgresql:2.3.0
  # presto-coordinator:
  #   image: shawnzhu/prestodb:0.181
  #   ports:
  #     - "8080:8080"

volumes:
  hadoop_namenode:
  hadoop_datanode:
  hadoop_historyserver:
  zookeeper_data:
  kafka_data:
  hbase_data:
    driver: local

networks:
  clothGAN-network:
    external: true
    name: clothGAN-network
    driver: bridge
